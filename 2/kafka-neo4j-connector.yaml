apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-neo4j-connector
  labels:
    app: kafka-neo4j-connector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-neo4j-connector
  template:
    metadata:
      labels:
        app: kafka-neo4j-connector
    spec:
      containers:
        - name: kafka-neo4j-connector
          image: roy012299/kafka-neo4j-connect:latest
          imagePullPolicy: IfNotPresent
          command: ["/bin/bash", "-c"]
          args:
            - |
              /etc/confluent/docker/run &
              echo "Waiting for Kafka Connect to start listening on port 8083..."
              while [[ "$(curl -s -o /dev/null -w '%{http_code}' http://localhost:8083/)" != "200" ]]; do
                echo "Kafka Connect HTTP state: $(curl -s -o /dev/null -w '%{http_code}' http://localhost:8083/)"
                sleep 5
              done
              echo "Kafka Connect REST API is up! Posting connector config."
              curl -X POST -H "Content-Type: application/json" --data @/config/sink.neo4j.json http://localhost:8083/connectors
              sleep infinity
          ports:
            - containerPort: 8083
          volumeMounts:
            - name: connector-config
              mountPath: /config
          env:
            - name: CONNECT_BOOTSTRAP_SERVERS
              value: "kafka-service:29092"
            - name: CONNECT_REST_PORT
              value: "8083"
      volumes:
        - name: connector-config
          configMap:
            name: connector-init-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: connector-init-config
data:
  sink.neo4j.json: |
    {
      "name": "Neo4jSinkConnectorJSONString",
      "config": {
        "topics": "nyc_taxicab_data",
        "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
        "key.converter": "org.apache.kafka.connect.json.JsonConverter",
        "key.converter.schemas.enable": false,
        "value.converter": "org.apache.kafka.connect.json.JsonConverter",
        "value.converter.schemas.enable": false,
        "errors.retry.timeout": "-1",
        "errors.retry.delay.max.ms": "1000",
        "errors.tolerance": "all",
        "errors.log.enable": true,
        "errors.log.include.messages": true,
        "bootstrap.servers": "kafka-service:29092",
        "neo4j.uri": "bolt://neo4j-service:7687",
        "neo4j.authentication.basic.username": "neo4j",
        "neo4j.authentication.basic.password": "project1phase2",
        "neo4j.topic.cypher.nyc_taxicab_data": "MERGE (p:Location {name: toInteger(PULocationID)}) MERGE (d:Location {name: toInteger(DOLocationID)}) MERGE (p)-[:TRIP {distance: toFloat(trip_distance), fare: toFloat(fare_amount), pickup_dt: datetime(tpep_pickup_datetime), dropoff_dt: datetime(tpep_dropoff_datetime)}]->(d)"
      }
    }

---
apiVersion: v1
kind: Service
metadata:
  name: kafka-neo4j-connector
spec:
  selector:
    app: kafka-neo4j-connector
  ports:
    - name: connector-rest
      protocol: TCP
      port: 8083
      targetPort: 8083
